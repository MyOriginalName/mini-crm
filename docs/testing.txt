# Тестирование приложения

## Общая информация
Приложение использует PHPUnit для тестирования. Все тесты разделены на два основных типа:
- Unit тесты (tests/Unit/) - тестирование отдельных компонентов
- Feature тесты (tests/Feature/) - тестирование функциональности приложения

## Unit тесты

### UserTest
Тестирует базовые операции с моделью User:
- Создание пользователя
- Обновление данных пользователя
- Удаление пользователя

### ClientTest
Тестирует операции с моделью Client:
- Создание клиента
- Проверка связи с пользователем
- Обновление данных клиента
- Мягкое удаление клиента (soft delete)

### DealTest
Тестирует операции с моделью Deal:
- Создание сделки
- Проверка связи с пользователем
- Проверка связи с клиентом
- Обновление статуса сделки
- Мягкое удаление сделки (soft delete)

### TaskTest
Тестирует операции с моделью Task:
- Создание задачи
- Проверка связи с пользователем
- Проверка связи с клиентом
- Обновление статуса задачи
- Мягкое удаление задачи (soft delete)

## Feature тесты

### Auth тесты
Тестируют функциональность аутентификации:
- Регистрация новых пользователей
- Вход в систему
- Выход из системы
- Верификация email
- Сброс пароля
- Подтверждение пароля
- Обновление пароля

### ProfileTest
Тестирует функциональность профиля пользователя:
- Отображение страницы профиля
- Обновление информации профиля
- Проверка статуса верификации email
- Удаление аккаунта
- Проверка требований к паролю при удалении

### API тесты

#### AuthControllerTest
Тестирует API аутентификации:
- Регистрация пользователя через API
- Вход в систему через API
- Выход из системы через API
- Получение профиля пользователя
- Проверка валидации данных
- Проверка авторизации

#### ClientControllerTest
Тестирует API работы с клиентами:
- Получение списка клиентов
- Фильтрация клиентов по поиску
- Фильтрация клиентов по типу
- Создание нового клиента
- Получение информации о клиенте
- Обновление данных клиента
- Удаление клиента
- Обновление тегов клиента
- Проверка авторизации

#### DealControllerTest
Тестирует API работы со сделками:
- Получение списка сделок
- Фильтрация сделок по статусу
- Создание новой сделки
- Получение информации о сделке
- Обновление данных сделки
- Удаление сделки
- Обновление статуса сделки
- Проверка авторизации

#### TaskControllerTest
Тестирует API работы с задачами:
- Получение списка задач
- Фильтрация задач по статусу
- Фильтрация задач по приоритету
- Создание новой задачи
- Получение информации о задаче
- Обновление данных задачи
- Удаление задачи
- Проверка авторизации

## Запуск тестов
Для запуска всех тестов используется команда:
```bash
php artisan test
```

## Тестовое окружение
Тесты выполняются в отдельном окружении, настроенном в файле .env.testing:
- Используется SQLite в памяти
- Отключена отправка реальных email-сообщений
- Настроены специальные параметры для тестирования сброса пароля

## Особенности тестирования
1. Все тесты используют фабрики моделей для создания тестовых данных
2. Реализовано мягкое удаление (soft delete) для основных моделей
3. Тесты аутентификации используют встроенные механизмы Laravel
4. Проверяется корректность редиректов после различных действий
5. Тестируется валидация данных и обработка ошибок
6. API тесты проверяют авторизацию и права доступа
7. Тесты API используют токены для аутентификации
8. Проверяется структура JSON-ответов API
9. Тестируются все CRUD операции через API
10. Проверяется работа фильтров и поиска в API

# Тестирование и тестовые данные

## Тестовые учетные записи

1. Администратор
   - Email: admin@demo.com
   - Пароль: admin123
   - Роль: admin
   - Доступ: полный доступ ко всем функциям системы

2. Менеджер
   - Email: manager@demo.com
   - Пароль: manager123
   - Роль: manager
   - Доступ: просмотр, создание и редактирование клиентов, сделок и задач

3. Пользователь
   - Email: user@demo.com
   - Пароль: user123
   - Роль: user
   - Доступ: базовый доступ для просмотра клиентов и сделок, работа с собственными задачами

## Тестовые данные

### Клиенты
- Тестовые клиенты создаются через ClientSeeder
- Включают различные типы клиентов (физические и юридические лица)
- Содержат полную контактную информацию

### Сделки
- Тестовые сделки создаются через DealSeeder
- Включают сделки в различных статусах
- Содержат историю взаимодействий

### Задачи
- Тестовые задачи создаются через TaskSeeder
- Включают задачи разных типов и приоритетов
- Назначаются на разных пользователей

## Процесс тестирования

1. Установка тестовых данных:
   ```bash
   php artisan migrate:fresh --seed
   ```

2. Проверка ролей и разрешений:
   - Войти под каждой учетной записью
   - Проверить доступ к разным разделам
   - Убедиться в правильности ограничений

3. Проверка функциональности:
   - Создание новых записей
   - Редактирование существующих
   - Удаление записей (где разрешено)
   - Проверка валидации 