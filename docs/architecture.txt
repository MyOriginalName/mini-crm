# Архитектура проекта Mini-CRM

## Общая структура
- Backend: Laravel (PHP)
- Frontend: React + TypeScript
- База данных: MySQL/PostgreSQL
- Стилизация: Tailwind CSS

## Структура папок
```
mini-crm/
├── app/                    # Основной код приложения
│   ├── Http/              # Контроллеры, Middleware, Requests
│   │   ├── controllers/   # Контроллеры
│   │   ├── middleware/    # Middleware
│   │   ├── requests/      # Запросы
│   │   └── providers/     # Сервис-провайдеры
│   ├── models/            # Eloquent модели
│   ├── services/          # Бизнес-логика
│   ├── repositories/      # Работа с данными
│   └── providers/         # Сервис-провайдеры
├── config/                # Конфигурационные файлы
├── database/              # Миграции, сиды, фабрики
├── resources/             # Frontend ресурсы
│   ├── js/               # React компоненты
│   │   ├── components/   # Переиспользуемые компоненты
│   │   ├── pages/        # Страницы приложения
│   │   ├── hooks/        # React хуки
│   │   └── services/     # API сервисы
│   └── css/              # Стили
├── routes/                # Маршруты API и веб
├── storage/               # Файлы приложения
└── tests/                 # Тесты
```

## Основные модули и их расположение

### 1. Аутентификация и авторизация
- Backend:
  - `app/Http/Controllers/Auth/` - контроллеры аутентификации
  - `app/Http/Middleware/Authenticate.php` - middleware аутентификации
  - `config/auth.php` - конфигурация аутентификации
  - `routes/auth.php` - маршруты аутентификации
- Frontend:
  - `resources/js/pages/Auth/` - страницы входа/регистрации
  - `resources/js/services/auth.service.ts` - сервис аутентификации
  - `resources/js/hooks/useAuth.ts` - хук для работы с аутентификацией

### 2. Управление пользователями
- Backend:
  - `app/Http/Controllers/UserController.php` - CRUD операции
  - `app/models/User.php` - модель пользователя
  - `app/services/UserService.php` - бизнес-логика
  - `database/migrations/` - миграции таблицы пользователей
- Frontend:
  - `resources/js/pages/Users/` - страницы управления пользователями
  - `resources/js/components/Users/` - компоненты для работы с пользователями
  - `resources/js/services/user.service.ts` - API сервис

### 3. Управление клиентами
- Backend:
  - `app/Http/Controllers/ClientController.php`
  - `app/models/Client.php`
  - `app/services/ClientService.php`
  - `database/migrations/` - миграции таблицы клиентов
- Frontend:
  - `resources/js/pages/Clients/`
  - `resources/js/components/Clients/`
  - `resources/js/services/client.service.ts`

### 4. Управление задачами
- Backend:
  - `app/Http/Controllers/TaskController.php`
  - `app/models/Task.php`
  - `app/services/TaskService.php`
  - `database/migrations/` - миграции таблицы задач
- Frontend:
  - `resources/js/pages/Tasks/`
  - `resources/js/components/Tasks/`
  - `resources/js/services/task.service.ts`

### 5. Управление проектами
- Backend:
  - `app/Http/Controllers/ProjectController.php`
  - `app/models/Project.php`
  - `app/services/ProjectService.php`
  - `database/migrations/` - миграции таблицы проектов
- Frontend:
  - `resources/js/pages/Projects/`
  - `resources/js/components/Projects/`
  - `resources/js/services/project.service.ts`

### 6. Отчеты и аналитика
- Backend:
  - `app/Http/Controllers/ReportController.php`
  - `app/services/ReportService.php`
  - `app/exports/` - экспорт данных
- Frontend:
  - `resources/js/pages/Reports/`
  - `resources/js/components/Reports/`
  - `resources/js/services/report.service.ts`

## Ключевые компоненты
- Сервисный слой для бизнес-логики
- Репозиторный слой для работы с данными
- API ресурсы для форматирования ответов
- Хуки для управления состоянием
- Сервисы для API взаимодействия

## Зависимости между модулями
- Пользователи -> Аутентификация (зависит от)
- Задачи -> Пользователи (назначаются)
- Задачи -> Проекты (принадлежат)
- Проекты -> Клиенты (принадлежат)
- Отчеты -> Все модули (анализируют)

## Паттерны проектирования
- Repository Pattern - для работы с данными
- Service Layer - для бизнес-логики
- Factory Pattern - для создания объектов
- Observer Pattern - для событий
- Strategy Pattern - для различных алгоритмов
- Component Pattern - для React компонентов 

## Типы пользователей и роли

В системе существует три типа пользователей:

1. **Администратор (Administrator)**
   - Полный доступ ко всем функциям системы
   - Управление пользователями и их ролями
   - Просмотр всех логов и действий
   - Управление настройками системы

2. **Менеджер (Manager)**
   - Управление клиентами и сделками
   - Создание и назначение задач
   - Просмотр статистики и отчетов
   - Ограниченный доступ к настройкам

3. **Пользователь (User)**
   - Базовый доступ к системе
   - Работа с назначенными задачами
   - Просмотр собственных клиентов
   - Ограниченный доступ к функциям

Роли пользователей отображаются в профиле пользователя и используются для контроля доступа к различным функциям системы через систему разрешений Laravel. 

Структура контроллеров:
----------------------
app/Http/Controllers/
├── Auth/ - Контроллеры аутентификации и авторизации
│   ├── AuthenticatedSessionController.php - Управление сессиями
│   ├── ConfirmablePasswordController.php - Подтверждение пароля
│   ├── EmailVerificationNotificationController.php - Уведомления о верификации email
│   ├── EmailVerificationPromptController.php - Запрос верификации email
│   ├── NewPasswordController.php - Сброс пароля
│   ├── PasswordController.php - Управление паролем
│   ├── PasswordResetLinkController.php - Ссылки для сброса пароля
│   └── RegisteredUserController.php - Регистрация пользователей
├── Api/ - API контроллеры
├── CRM/ - Бизнес-логика CRM
│   ├── DealController.php - Управление сделками
│   ├── ClientController.php - Управление клиентами
│   └── TaskController.php - Управление задачами
└── User/ - Управление пользователями
    ├── ProfileController.php - Профиль пользователя
    └── UserController.php - Администрирование пользователей

Принципы организации:
1. Каждый контроллер отвечает за одну конкретную функциональность
2. Группировка по бизнес-доменам
3. Четкое разделение ответственности
4. Легкость навигации и поддержки
5. Масштабируемость 

Административная панель:
- Контроллеры: app/Http/Controllers/Admin/
  - AdminController.php - основной контроллер админ-панели
  - UserController.php - управление пользователями
  - LogController.php - просмотр логов
  - SystemSettingsController.php - настройки системы
  - ProfileController.php - профиль пользователя в админ-панели
- Представления: resources/js/Pages/Admin/
  - Users/Index.jsx - страница управления пользователями
  - Logs/Index.jsx - страница просмотра логов
  - Settings/Index.jsx - страница настроек системы
  - Profile/Edit.jsx - страница профиля в админ-панели
- Макеты:
  - resources/js/Layouts/AdminLayout.jsx - макет админ-панели
  - resources/js/Layouts/AuthenticatedLayout.jsx - макет пользовательской панели
- Middleware: app/Http/Middleware/AdminMiddleware.php

Особенности административной панели:
1. Отдельный профиль пользователя в админ-панели с сохранением контекста
2. Унифицированный дизайн выпадающих меню и навигации
3. Цветовая индикация действий в логах:
   - created (зеленый) - создание
   - updated (синий) - обновление
   - deleted (красный) - удаление
4. Пагинация с использованием компонентов UI
5. Переключение между админ и пользовательской панелями

## Система ролей и разрешений

В приложении реализована система ролей и разрешений с использованием пакета spatie/laravel-permission.

### Роли

1. Администратор (admin)
   - Полный доступ ко всем функциям системы
   - Доступ к админ-панели
   - Может создавать, просматривать, редактировать и удалять все ресурсы

2. Менеджер (manager)
   - Доступ к клиентам (просмотр, создание, редактирование)
   - Доступ к сделкам (просмотр, создание, редактирование)
   - Доступ к задачам (просмотр, создание, редактирование)
   - Нет доступа к удалению ресурсов
   - Нет доступа к админ-панели

3. Пользователь (user)
   - Базовый доступ только для просмотра клиентов и сделок
   - Может просматривать и редактировать только свои задачи

### Разрешения

1. Управление пользователями:
   - manage users
   - create users
   - edit users
   - delete users
   - view users

2. Управление клиентами:
   - manage clients
   - create clients
   - edit clients
   - delete clients
   - view clients

3. Управление сделками:
   - manage deals
   - create deals
   - edit deals
   - delete deals
   - view deals

4. Управление задачами:
   - manage tasks
   - create tasks
   - edit tasks
   - delete tasks
   - view tasks
   - edit own tasks
   - view own tasks 