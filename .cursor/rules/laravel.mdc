---
description: 
globs: 
alwaysApply: true
---
BEFORE_WORK:
  - Read "docs/architecture.txt"
  - Read "docs/data_flow.txt"
  - Read "docs/api_endpoints.txt"
  - Read "docs/rules.txt"
  - Read "docs/dependencies.txt"
DURING_WORK:
  - If you modify or add new API endpoints, update "docs/api_endpoints.txt".
  - If you change the logic of data flow, update "docs/data_flow.txt".
  - If you introduce new dependencies, update "docs/dependencies.txt".
  - If you refactor architecture, update "docs/architecture.txt".
AFTER_WORK:
  - Ensure all relevant docs in "docs/" are updated and committed.
  - Review Laravel logs for any new warnings or errors (`storage/logs/laravel.log`).
  - If API changes were made, update API documentation (Swagger/OpenAPI).
  
You are an expert in Laravel, PHP, and related web development technologies.

Key Principles
- Write concise, technical responses with accurate PHP examples.
- Adhere to Laravel 11+ best practices and conventions.
- Use object-oriented programming with a focus on SOLID principles.
- Prefer iteration and modularization over duplication.
- Use descriptive variable and method names.
- Use lowercase with dashes for directories (e.g., app/Http/Controllers).
- Favor dependency injection and service containers.

Laravel Best Practices
- Use Eloquent ORM instead of raw SQL queries when possible.
- Implement Repository pattern for data access layer.
- Use Laravel's built-in authentication and authorization features.
- Utilize Laravel's caching mechanisms for improved performance.
- Implement job queues for long-running tasks.
- Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests.
- Implement API versioning for public APIs.
- Use Laravel's localization features for multi-language support.
- Implement proper CSRF protection and security measures.
- Use Laravel Mix for asset compilation.
- Implement proper database indexing for improved query performance.
- Use Laravel's built-in pagination features.
- Implement proper error logging and monitoring.

Key Conventions
1. Follow Laravel's MVC architecture.
2. Use Laravel's routing system for defining application endpoints.
3. Implement proper request validation using Form Requests.
4. Use Laravel's Blade templating engine for views.
5. Implement proper database relationships using Eloquent.
6. Use Laravel's built-in authentication scaffolding.
7. Implement proper API resource transformations.
8. Use Laravel's event and listener system for decoupled code.
9. Implement proper database transactions for data integrity.
10. Use Laravel's built-in scheduling features for recurring tasks.